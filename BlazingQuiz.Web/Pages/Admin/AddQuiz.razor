@page "/admin/add-quiz"
@inject IQuizApi QuizApi
@inject ICategoryApi CategoryApi

<h1>Add New Quiz </h1>
<hr/>

<EditForm Model="_quiz">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Category</label>
                <InputSelect class="form-control" @bind-Value="_quiz.CategoryId" >
                    <option value="0">Select Category</option>
                    @foreach(var c in _categories)
                    {   
                        <option value="@c.Id">@c.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _quiz.CategoryId" ></ValidationMessage>
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Name</label>
                <InputText class="form-control" @bind-Value="_quiz.Name"></InputText>
                <ValidationMessage For="() => _quiz.Name"></ValidationMessage>
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Total Questions</label>
                <InputNumber class="form-control" @bind-Value="_quiz.TotalQuestion"></InputNumber>
                <ValidationMessage For="() => _quiz.TotalQuestion"></ValidationMessage>
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Time (minutes) </label>
                <InputNumber class="form-control" @bind-Value="_quiz.TimeInMinutes"></InputNumber>
                <ValidationMessage For="() => _quiz.TimeInMinutes"></ValidationMessage>
            </div>
        </div>

        <hr />
        <h4 class="">Questions</h4>
        <ol>
            @foreach (var q in _quiz.Questions)
            {
                var random = Guid.NewGuid();
                <li class="shadow p-3 mb-3">
                    <textarea type="text" @bind="q.Text" class="form-control" rows="3"></textarea>
                    <h6>Options</h6>
                    <ol>
                        @foreach(var o in q.Options)
                        {
                            <li class="p-2 mb-2">
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <input class="form-check-input mt-0" type="radio"
                                        name="options_radio_@random"
                                        checked="@o.IsCorrect" 
                                        @onchange="() => SetOptionAsCorrectAnswer(q , o)"
                                        >
                                    </div>
                                    <input type="text" class="form-control" @bind="o.Text" >
                                    <button class="btn btn-danger" type="button" @onclick="() => q.Options.Remove(o)" >X</button>
                                </div>
                            </li>
                        }
                    </ol>
                    <div class="d-flex justify-content-center">
                        <button type="button" class="btn btn-sm btn-info" @onclick="() => q.Options.Add(new())">New Option</button>
                    </div>
                </li>
            }
        </ol>
        <div class="mt-3 d-flex justify-content-end">
            <button type="button" class="btn btn-sm btn-success" @onclick="() => _quiz.Questions.Add(GetDefaultEmptyQuestion())">New Question</button>
        </div>

        <div class="col-sm-4">
            <div class="mb-3">
                <div class="form-check form-switch">
                    <InputCheckbox @bind-Value="_quiz.IsActive"  class="form-check-input" type="checkbox" role="switch" id="quizIsActive" checked></InputCheckbox>
                    <label class="form-check-label" for="quizIsActive">is Active ?</label>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private SaveQuizDto _quiz = new();
    private CategoryDto[] _categories = [];

    protected override async Task OnInitializedAsync()
    {
        var question = GetDefaultEmptyQuestion();
        _quiz.Questions = [question];

        _categories = await CategoryApi.GetCategoriesAsync();
    }

    private QuestionDto GetDefaultEmptyQuestion() =>  new QuestionDto
    {
            Options = [new (), new ()]
    };

    private void SetOptionAsCorrectAnswer(QuestionDto questionDto , OptionDto optionDto)
    {
        foreach (var option in questionDto.Options)
        {
            option.IsCorrect = false;


        }
        optionDto.IsCorrect = true;
    }

}
