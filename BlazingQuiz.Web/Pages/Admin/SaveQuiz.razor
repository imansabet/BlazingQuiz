@page "/admin/add-quiz"
@page "/admin/edit-quiz/{quizId:guid?}"

@inject IQuizApi QuizApi
@inject ICategoryApi CategoryApi
@inject IJSRuntime JsRunTime
@inject IAppState AppState

@inject NavigationManager NavigationManager

<SectionContent SectionName="pageTitle">@(IsEditCase ? "Update Quiz" : "Add New Quiz")</SectionContent>

<EditForm Model="_quiz" OnValidSubmit="SaveQuizAsync">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Category</label>
                <InputSelect class="form-control" @bind-Value="_quiz.CategoryId" >
                    <option value="0">Select Category</option>
                    @foreach(var c in _categories)
                    {   
                        <option value="@c.Id">@c.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _quiz.CategoryId" ></ValidationMessage>
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Name</label>
                <InputText class="form-control" @bind-Value="_quiz.Name"></InputText>
                <ValidationMessage For="() => _quiz.Name"></ValidationMessage>
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Total Questions</label>
                <InputNumber class="form-control" @bind-Value="_quiz.TotalQuestion"></InputNumber>
                <ValidationMessage For="() => _quiz.TotalQuestion"></ValidationMessage>
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Time (minutes) </label>
                <InputNumber class="form-control" @bind-Value="_quiz.TimeInMinutes"></InputNumber>
                <ValidationMessage For="() => _quiz.TimeInMinutes"></ValidationMessage>
            </div>
        </div>

        <hr class="my-2" />
        <h3 class="fw-bold">Questions</h3>

        <ol class="mb-0">
            @foreach (var q in _quiz.Questions)
            {
                var random = Guid.NewGuid();
                <li class="p-3 mb-3 bg-white">
                    <textarea type="text" @bind="q.Text" class="form-control" rows="3"></textarea>
                    <h6 class="my-2 fw-bold">Options</h6>
                    <ol>
                        @foreach(var o in q.Options)
                        {
                            <li class="p-2 mb-2">
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <input class="form-check-input mt-0" type="radio"
                                        name="options_radio_@random"
                                        checked="@o.IsCorrect" 
                                        @onchange="() => SetOptionAsCorrectAnswer(q , o)"
                                        >
                                    </div>
                                    <input type="text" class="form-control" @bind="o.Text" >
                                    <button class="btn btn-danger" type="button" @onclick="() => q.Options.Remove(o)" >X</button>
                                </div>
                            </li>
                        }
                    </ol>
                    <div class="d-flex justify-content-center">
                        <button type="button" class="btn btn-sm btn-info" @onclick="() => q.Options.Add(new())">New Option</button>
                    </div>
                </li>
            }
        </ol>   
        <div class="mt-0 mb-3 d-flex justify-content-end">
            <button type="button" class="btn btn-sm btn-info" @onclick="() => _quiz.Questions.Add(GetDefaultEmptyQuestion())">New Question</button>
        </div>

        <hr />
        <div class="row mb-5 align-items-center">
            <div class="col-sm-3 ms-auto d-flex justify-content-end">
                <div class="form-check form-switch">
                    <InputCheckbox @bind-Value="_quiz.IsActive" class="form-check-input" type="checkbox" role="switch" id="quizIsActive" checked></InputCheckbox>
                    <label class="form-check-label" for="quizIsActive">is Active ?</label>
                </div>
            </div>
            <div class="col-sm-5 d-grid me-auto"> 
                <button type="submit" class="btn btn-success w-25 m-3 p-3 justify-content-center"> Save Quiz </button>
            </div>
        </div>

    </div>
</EditForm>

@code {
    [Parameter]
    public Guid? QuizId { get; set; }
    private bool IsEditCase => QuizId.HasValue && QuizId.Value != Guid.Empty;


    private SaveQuizDto _quiz = new();
    private CategoryDto[] _categories = [];

    protected override async Task OnInitializedAsync()
    {
        if(IsEditCase)
        {
            // Fetch _quiz from Api
            AppState.ShowLoader("Fetching Quizes . . .");
            var quiz = await QuizApi.GetQuizToEditAsync(QuizId!.Value);
            AppState.HideLoader();
            if(quiz == null)
            {
                NavigationManager.NavigateTo("admin/manage-quizes");
                return;
            }
            _quiz = quiz;
        }
        else
        {
            var question = GetDefaultEmptyQuestion();
            _quiz.Questions = [question];
        }

        AppState.ShowLoader("Fetching Categories . . .");

        _categories = await CategoryApi.GetCategoriesAsync();
        AppState.HideLoader();
    }


    protected override void OnParametersSet()
    {
        if(!QuizId.HasValue && _quiz.Id != Guid.Empty )
        {
            // We Were In Edit Mode & We Clicked On Add New Quiz On Nav Menu
            _quiz = new();
            _quiz.Questions = [GetDefaultEmptyQuestion()];
        }
    }

    private QuestionDto GetDefaultEmptyQuestion() =>  new QuestionDto
    {
            Options = [new (), new ()]
    };

    private void SetOptionAsCorrectAnswer(QuestionDto questionDto , OptionDto optionDto)
    {
        foreach (var option in questionDto.Options)
        {
            option.IsCorrect = false;


        }
        optionDto.IsCorrect = true;
    }

    private async Task SaveQuizAsync()
    {
        var errorMEssage = _quiz.Validate();
        if(!string.IsNullOrEmpty(errorMEssage))
        {
            await ShowAlertAsync(errorMEssage);
            return;
        }
        AppState.ShowLoader("Saving Quiz . . .");

        var response = await QuizApi.SaveQuizAsync(_quiz);
        AppState.HideLoader();

        if(!response.IsSuccess)
        {
            await ShowAlertAsync(errorMEssage);
            return;
        }
        NavigationManager.NavigateTo("admin/manage-quizes");

    }
    private async Task ShowAlertAsync(string message, string title = "Error") => 
        await JsRunTime.InvokeVoidAsync("alert", $"{title}\n{message}");
    

}
