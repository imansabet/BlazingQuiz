@page "/student/home"
@inject IAppState AppState
@inject ICategoryApi CategoryApi
@inject IStudentQuizApi StudentQuizApi
@inject NavigationManager NavigationManager
@inject QuizState QuizState

<SectionContent SectionName="pageTitle">Home</SectionContent>

<div class="container">
    <div class="row">
        <div class="col-sm-3 ms-auto mb-2">
            <label class="form-label">Select Category</label>
            <select class="form-control" @bind="_selectedCategoryId" @bind:after="OnSelectedCategoryChanged">
                <option value="0">Select Category</option>
                @foreach (var c in _categories)
                {
                    <option value="@c.Id">@c.Name</option>
                }
            </select>
        </div>
    </div>

    @if (!_isLoading && _quizes.Length == 0)
    {
        var message = _selectedCategoryId == 0
        ? "There are no active quizes right now"
        : "There are no active quizes in this category";
        <p class="h3 text-muted text-center">@message</p>
    }
    else
    {
        <div class="row">
            @foreach (var q in _quizes)
            {
                <div class="col-sm-4 mb-3">
                    <div class="box bg-white p-3">
                        <h5 class="fw-bold">@q.Name</h5>
                        <hr />
                        <table class="table">
                            <tr>
                                <td><label class="fw-bold">Category</label></td>
                                <td><span>@q.CategoryName</span></td>
                            </tr>
                            <tr>
                                <td><label class="fw-bold">No of Questions</label></td>
                                <td><span>@q.TotalQuestion question(s)</span></td>
                            </tr>
                            <tr>
                                <td><label class="fw-bold">Time In Minutes</label></td>
                                <td><span>@q.TimeInMinutes minute(s)</span></td>
                            </tr>
                        </table>
                        <hr />
                        <button type="button" class="btn btn btn-warning" @onclick="() => _startingQuiz = q">Start Quiz</button>
                    </div>
                </div>
            }
        </div>
    }
</div>
@if (_startingQuiz != null)
{
    var title = $"Start {_startingQuiz.Name}?";
    <Modal Title="@title" OnCancelClick="() => _startingQuiz = null" OnActionButtonClick="StartQuiz">
        <p class="m-0 p-3">Do You Want To Start This Quiz ? <br />
            You Will Not Be Able To Pause The Quiz    
        </p>
    </Modal>
}


@code {
    private CategoryDto[] _categories = [];
    private QuizListDto[] _quizes = [];
    private bool _isLoading;
    private int _selectedCategoryId ;
    private QuizListDto? _startingQuiz;

    protected override async Task OnInitializedAsync()
    {
        AppState.ShowLoader("Fetching Quizes & Categories ");
        try
        {
            _isLoading = true;
            var categoriesTask = CategoryApi.GetCategoriesAsync();

            _quizes = await StudentQuizApi.GetActiveQuizesAsync(_selectedCategoryId);

            _categories = await categoriesTask;
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            AppState.HideLoader();
            _isLoading = false;

        }
    }

    private async Task OnSelectedCategoryChanged()
    {
        AppState.ShowLoader("Fetching Quizes ");

        if (_selectedCategoryId == 0)
        {
            _quizes = [];
        }
        else
        {
            _quizes = await StudentQuizApi.GetActiveQuizesAsync(_selectedCategoryId);
        }
        AppState.HideLoader();
    }

    private void StartQuiz() 
    {
        QuizState.SetQuiz(_startingQuiz);
        NavigationManager.NavigateTo("student/quiz");
    }

}
