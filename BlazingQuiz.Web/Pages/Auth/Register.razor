@page "/auth/register"
@layout EmptyLayout

@inject NavigationManager NavigationManager
@inject IAuthApi AuthApi
@inject QuizAuthStateProvider QuizAuthStateProvider

<div class="container">
    <div class="row vh-100">
        <div class="col-sm-4 mx-auto my-auto  border shadow-lg ">
            <div class="mt-3">
                <h1 class="h3"> 
                    Register | Blazing Quiz
                </h1>

                <hr />
            </div>
            <EditForm  Model="_model" OnValidSubmit="RegisterAsync" >
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label class="form-label" >Name : </label>
                    <InputText @bind-Value="_model.Name" class="form-control" />
                    <ValidationMessage For="() => _model.Name" ></ValidationMessage>
                </div>
                <div class="mb-3">
                    <label class="form-label">Email : </label>
                    <InputText @bind-Value="_model.Email" class="form-control" />
                    <ValidationMessage For="() => _model.Email"></ValidationMessage>
                </div>
                <div class="mb-3">
                    <label class="form-label">Phone : </label>
                    <InputText @bind-Value="_model.Phone" class="form-control" />
                    <ValidationMessage For="() => _model.Phone"></ValidationMessage>
                </div>
                <div class="mb-3">
                    <label class="form-label">Password : </label>
                    <InputText type="password" @bind-Value="_model.Password" class="form-control" />
                    <ValidationMessage For="() => _model.Password"></ValidationMessage>
                </div>
                @if(_error != null)
                {
                    <div class="mb-3 bg-danger text-white p-2" >
                        <p>@_error</p>
                    </div>
                }
                <div class="mb-3 d-flex justify-content-between">
                    @if (!_isBusy)
                    {
                        <a href="auth/login" class="btn btn-outline-primary">Login</a>

                        <button type="submit" class="btn btn-success">Register</button>
                    }
                    else
                    {
                        <button type="button" disabled class="btn btn-secondary">Registering ...</button>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>
@if (_showSuccessAlert)
{
    <Modal Title="Success" OnActionButtonClick="OnModalClose" OnCancelClick="OnModalClose">
        <p class="h5 text-success">Well done! <br />
            You will be able to log in soon after the admin approves your account.</p>
    </Modal>

}

@code {
    private RegisterDto _model = new();

    private bool _isBusy;
    private string? _error;

    private bool _showSuccessAlert;

    protected override void OnInitialized()
    {
        if (QuizAuthStateProvider.IsLoggedIn)
        {
            NavigationManager.NavigateTo("/", replace: true);

        }

    }

    private async Task RegisterAsync()
    {
        _error = null;
        _isBusy = true;
        try
        {
            var apiResponse = await AuthApi.RegisterAsync(_model);
            if (!apiResponse.IsSuccess)
            {
                _error = apiResponse.ErrorMessage;
                return;

            }

            _showSuccessAlert = true;

        }
        catch(Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _isBusy = false;
        }

    }

    private void OnModalClose() 
    {
        _model = new();
        NavigationManager.NavigateTo("auth/login");

    }
}
